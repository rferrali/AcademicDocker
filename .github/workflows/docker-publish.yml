name: Multi-Arch Docker Build
on:
  pull_request:
    branches: ["main"]
  push:
    tags: ["v*"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/academic-docker

jobs:
  metadata:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      json: ${{ steps.meta.outputs.json }}
      r-version: ${{ steps.extract-version.outputs.r-version }}
      tl-scheme: ${{ steps.extract-version.outputs.tl-scheme }}
    steps:
      - name: Extract R version from tag
        id: extract-version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
            # Extract R version from tag (e.g., v4.5.1 -> 4.5.1)
            R_VERSION=${GITHUB_REF#refs/tags/v}
            TL_SCHEME=scheme-full
            echo "r-version=$R_VERSION" >> $GITHUB_OUTPUT
            echo "tl-scheme=$TL_SCHEME" >> $GITHUB_OUTPUT
            echo "R version from tag: $R_VERSION"
            echo "Tex scheme for production: $TL_SCHEME"
          else
            # For PR builds, use a default R version (won't be pushed anyway)
            TL_SCHEME=scheme-small
            echo "r-version=4.5.1" >> $GITHUB_OUTPUT
            echo "tl-scheme=$TL_SCHEME" >> $GITHUB_OUTPUT
            echo "Using default R version for build test"
            echo "Tex scheme for build test: $TL_SCHEME"
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=pep440,pattern={{version}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=pep440,pattern={{major}}.{{minor}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=pep440,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable={{is_default_branch}}

  build-amd64:
    runs-on: ubuntu-latest
    needs: metadata
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push AMD64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ needs.metadata.outputs.tags }}
          labels: ${{ needs.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            R_VERSION=${{ needs.metadata.outputs.r-version }}
            TEX_SCHEME=${{ needs.metadata.outputs.tex-scheme }}

      - name: Export digest
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: digests-amd64
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  build-arm64:
    runs-on: ubuntu-24.04-arm
    needs: metadata
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ARM64 image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ needs.metadata.outputs.tags }}
          labels: ${{ needs.metadata.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            R_VERSION=${{ needs.metadata.outputs.r-version }}
            TEX_SCHEME=${{ needs.metadata.outputs.tex-scheme }}

      - name: Export digest
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: digests-arm64
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - metadata
      - build-amd64
      - build-arm64
    permissions:
      contents: read
      packages: write
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
        env:
          DOCKER_METADATA_OUTPUT_JSON: ${{ needs.metadata.outputs.json }}
